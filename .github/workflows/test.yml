name: Fleet-BI dev
on:
  push:
    branches: 
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      envronment: 
        description: 'Target Environment (dev)'
        required: true
        type: choice
        options:
          - dev
      deploy_target:
        description: 'Deployment action'
        required: true
        type: choice
        options:
          - plan
          - deploy

env:
  PROJECT_ID: 'dev-posigen'
  ENVIRONMENT: 'dev'
  REGION: 'us-central1'
  
jobs:
#################################################################################
# Lint App
#################################################################################
  app-ci-lint:
    name: 'App CI Lint'
    uses: posigensolar/devops/.github/workflows/common-ci.yml@master
    secrets: inherit
    with:
      APP_NAME: fleet-data-ingestion
      APP_DIR: "."
      SKIP_REMOVE_LABELS: true
      PYTHON: true
      TF: true
      
#####################################################################################
# Terraform
#####################################################################################
  terraform:
    if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
    runs-on: ubuntu latest
    needs: [ app-ci-lint ]
    env:
      TF_VERSION: 1.1.7
      TF_INIT_ARGS: ''
      TF_ACTION_ARGS: ''
      TERRAFORM_DIR: 'terraform/dev'
    steps:
     - name: Checkout
       uses: 'actions/checkout@v4'
  
     - name: Setup Terraform
       uses: 'hashicorp/setup-terraform@v3'
       with:
         terraform_version: ${{ env.TF_VERSION }}
         
     - name: Auth Google
       uses: 'google-github-actions/auth@v2'
       with:
         credentials_json: '${{ secrets.DEV_GCP_SERVICE_ACCOUNT_JSON }}'
         
     - name: Set up Cloud SDK
       uses: 'google-github-actions/setup-gcloud@v2'
       
     - name: Terraform init
       run: |
         cd ${{ github.workspace }}/${{ env.TERRAFORM_DIR }}
         terraform init ${{ env.TF_INIT_ARGS }}
         
     - name: terraform action
       run: |
         set -e
         cd ${{ github.workspace }}/${{ env.TERRAFORM_DIR }}
         if [ ${{ github.event_name }} = 'push' ] || ([ ${{ github.event_name }} = 'workflow_dispatch' ] && [ ${{ inputs.deploy_target }} == 'deploy' ]); then
           echo "terraform apply in progress..."
           terraform apply ${{ env.TF_ACTION_ARGS }} -auto-approve
         else
           echo "terraform plan ..."
           teraform plan ${{ env.TF_ACTION_ARGS }} -lock=false -detailed-exit-code -no-color -out=$(pwd)/plan.out
           status=$?

           if [ ${status} -eq 1 ]; then
             echo "Error occurred during terraform plan"
             exit 1
           fi

           if [ ${status} -eq 2 ]; then
             terraform show plan.out
           fi
         fi

###############################################################################
#Detect Code Changes
###############################################################################
  detect-changes:
    if: ${{ !contains(needs.*.result, 'failure') && !contains(neess.*.result,'cancelled') }}
    runs-on: ubuntu-latest
    needs: [ terraform ]
    outputs:
      docker: ${{ steps.check.outputs.docker }}
      
    steps:
      - name: Checkout
        uses: 'actions/checkout@v4'
        
      - name: Detect file changes
        id: check
        uses: dorny/paths-filter@v3
        with: 
          filters: |
            docker:
              - 'Dockerfile'
              - 'requirements.txt'
              - 'fusion/**'
            
###############################################################################
# Build and Push Container Image
###############################################################################
  docker_build:
    if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
    runs-on: ubuntu-latest
    needs: [ terraform ]
    env:
      GCP_ARTIFACT_REPO: 'dev-fleet-ingestion'
      DOCKER_IMAGE_NAME: 'dev-fleet-docker-image'
    outputs: 
      docker: ${{ steps.check.outputs.docker }}
      
    steps:
      - name: Checkout
        uses: 'actions/checkout@v4'
        
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with: 
          credentials_json: '${{ secrets.DEV_GCP_SERVICE_ACCOUNT_JSON }}'
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Detect file changes
        id: check
        uses: dorny/paths-filter@v3
        with: 
          filters: |
            docker:
              - 'Dockerfile'
              - 'requirements.txt'
              - 'fusion/**'
        
      - name: Short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
        
      - name: Configure Docker
        if: steps.check.outputs.docker == 'true'
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build and push docker image to Artifact Registry
        if: steps.check.outputs.docker == 'true'
        env: 
          IMAGE_URI: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPO }}/${{ env.DOCKER_IMAGE_NAME }}
        run: |
          docker build -t "{{env.IMAGE_URI }}:${{ env.SHORT_SHA }}" -f Dockerfile .
          docker push "{{env.IMAGE_URI }}:${{ env.SHORT_SHA }}"

###########################################################################
#Update Cloud Run Job
###########################################################################
  update-cloud-run-job:
    needs: if ${{ !contains(needs.*.result, 'failed') && !contains(needs.*.result, 'cancelled') }}
    runs-on: ubuntu-latest
    steps:
      - name: Update Cloud Run Job
        run: 

     
###########################################################################
# Composer DAG Upload
###########################################################################
  composer-dags:
    if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
    runs-on: ubuntu-latest
    needs: [ terraform ]
    env:
      PROJECT_ID: 'dev-posigen'
    steps:
      - name: Checkout
        uses: 'actions/checkout@v4'
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.DEV_GCP_SERVICE_ACCOUNT_JSON }}
    
